{"slots":{"0":{"name":"Screen","type":{"events":[],"methods":[]}},"1":{"name":"slot2","type":{"events":[],"methods":[]}},"2":{"name":"slot3","type":{"events":[],"methods":[]}},"3":{"name":"slot4","type":{"events":[],"methods":[]}},"4":{"name":"slot5","type":{"events":[],"methods":[]}},"5":{"name":"slot6","type":{"events":[],"methods":[]}},"6":{"name":"slot7","type":{"events":[],"methods":[]}},"7":{"name":"slot8","type":{"events":[],"methods":[]}},"8":{"name":"slot9","type":{"events":[],"methods":[]}},"9":{"name":"slot10","type":{"events":[],"methods":[]}},"-1":{"name":"unit","type":{"events":[],"methods":[]}},"-2":{"name":"system","type":{"events":[],"methods":[]}},"-3":{"name":"library","type":{"events":[],"methods":[]}}},"handlers":[{"code":"function GetPosString(px,py,pz)\n    local r=49000\n    local cx=29165536\n    local cy=10865536\n    local cz=65536\n    rad2deg=180/math.pi\n    x=px-cx\n    y=py-cy\n    z=pz-cz\n    d=math.sqrt(x^2+y^2+z^2)\n    alt=d-r\n    phi=math.atan(y,x)\n    lon= phi>=0 and phi or (2*math.pi+phi)\n    lat= math.pi/2 - math.acos(z/d)\n    \n    alt_str=string.format('%.4f',alt)\n    lon_str=string.format('%.4f',lon*rad2deg)\n    lat_str=string.format('%.4f',lat*rad2deg)\n\n    pos_str='::pos{0,3,'..lat_str..','..lon_str..','..alt_str..'}'\n    return pos_str\nend\n\ndistance_list={400,350,300,250,200,150,100,50,45,40,35,30,25,20,15,10,5}\nbutton_r=25\ndx=5\ncurrent_di=1\nmargin=0.10\n\nhudHTML=[[\n<svg width=\"100vw\" height=\"100vh\" viewBox=\"0 0 1920 1080\">\n]]\n\ncx=button_r\ncy=button_r\nfor index,d in pairs(distance_list) do\n    if d==distance_list[current_di] then\n        stroke_color=\"yellow\"\n    else\n        stroke_color=\"white\"\n    end\n    hudHTML=hudHTML..[[\n    <circle cx=\"]]..cx..[[\" cy=\"]]..cy..[[\" r=\"]]..button_r..[[\" stroke=\"]]..stroke_color..[[\" stroke-width=\"3\" fill=\"black\"/>\n    <text x=\"]]..cx..[[\" y=\"]]..cy..[[\" font-size='14' fill=\"green\" text-anchor='middle' font-family='Montserrat'>]]..d..[[</text>\n    ]]\n    cx=cx+2*button_r+dx\n    end\n\nhudHTML=hudHTML..[[\n</svg>\n]]\n\nfirstMeasure=1\n--measureCount=0\n\nsystem.setScreen(hudHTML)\nsystem.showScreen(1)","filter":{"args":[],"signature":"start()","slotKey":"-1"},"key":"0"},{"code":"Screen.clear()","filter":{"args":[],"signature":"stop()","slotKey":"-1"},"key":"1"},{"code":"current_di=current_di-1\nif current_di==0 then\n    current_di=#distance_list\nend\n\nhudHTML=[[\n<svg width=\"100vw\" height=\"100vh\" viewBox=\"0 0 1920 1080\">\n]]\n\ncx=button_r\ncy=button_r\nfor index,d in pairs(distance_list) do\n    if d==distance_list[current_di] then\n        stroke_color=\"yellow\"\n    else\n        stroke_color=\"white\"\n    end\n    hudHTML=hudHTML..[[\n    <circle cx=\"]]..cx..[[\" cy=\"]]..cy..[[\" r=\"]]..button_r..[[\" stroke=\"]]..stroke_color..[[\" stroke-width=\"3\" fill=\"black\"/>\n    <text x=\"]]..cx..[[\" y=\"]]..cy..[[\" font-size='14' fill=\"green\" text-anchor='middle' font-family='Montserrat'>]]..d..[[</text>\n    ]]\n    cx=cx+2*button_r+dx\n    end\n\nhudHTML=hudHTML..[[\n</svg>\n]]\n\nsystem.setScreen(hudHTML)","filter":{"args":[{"value":"option1"}],"signature":"actionStart(action)","slotKey":"-2"},"key":"2"},{"code":"current_di=current_di+1\nif current_di>#distance_list then\n    current_di=1\nend\n\nhudHTML=[[\n<svg width=\"100vw\" height=\"100vh\" viewBox=\"0 0 1920 1080\">\n]]\n\ncx=button_r\ncy=button_r\nfor index,d in pairs(distance_list) do\n    if d==distance_list[current_di] then\n        stroke_color=\"yellow\"\n    else\n        stroke_color=\"white\"\n    end\n    hudHTML=hudHTML..[[\n    <circle cx=\"]]..cx..[[\" cy=\"]]..cy..[[\" r=\"]]..button_r..[[\" stroke=\"]]..stroke_color..[[\" stroke-width=\"3\" fill=\"black\"/>\n    <text x=\"]]..cx..[[\" y=\"]]..cy..[[\" font-size='14' fill=\"green\" text-anchor='middle' font-family='Montserrat'>]]..d..[[</text>\n    ]]\n    cx=cx+2*button_r+dx\n    end\n\nhudHTML=hudHTML..[[\n</svg>\n]]\n\nsystem.setScreen(hudHTML)","filter":{"args":[{"value":"option2"}],"signature":"actionStart(action)","slotKey":"-2"},"key":"3"},{"code":"dist=distance_list[current_di]\nplayer_id=unit.getMasterPlayerId()\nplayer_pos=vec3(system.getPlayerWorldPos(player_id))\n\nif firstMeasure==1 then\n    firstMeasure=0\n    measureList={}\n    table.insert(measureList,{player_pos.x,player_pos.y,player_pos.z,dist^2})\n    boxXmin=player_pos.x-(1+margin)*dist\n    boxXmax=player_pos.x+(1+margin)*dist\n    boxYmin=player_pos.y-(1+margin)*dist\n    boxYmax=player_pos.y+(1+margin)*dist\n    boxZmin=player_pos.z-(1+margin)*dist\n    boxZmax=player_pos.z+(1+margin)*dist\n    \n    marker_x=player_pos.x\n    marker_y=player_pos.y\n    marker_z=player_pos.z\nelse\n    table.insert(measureList,{player_pos.x,player_pos.y,player_pos.z,dist^2})\n    box2Xmin=player_pos.x-(1+margin)*dist\n    box2Xmax=player_pos.x+(1+margin)*dist\n    box2Ymin=player_pos.y-(1+margin)*dist\n    box2Ymax=player_pos.y+(1+margin)*dist\n    box2Zmin=player_pos.z-(1+margin)*dist\n    box2Zmax=player_pos.z+(1+margin)*dist\n    \n    boxXmin=math.max(boxXmin,box2Xmin)\n    boxXmax=math.min(boxXmax,box2Xmax)\n    boxYmin=math.max(boxYmin,box2Ymin)\n    boxYmax=math.min(boxYmax,box2Ymax)\n    boxZmin=math.max(boxZmin,box2Zmin)\n    boxZmax=math.min(boxZmax,box2Zmax)\n    \n    if boxXmin>=boxXmax or boxYmin>=boxYmax or boxZmin>=boxZmax then\n        system.print(\"ERROR: unable to define bounding box\")\n        system.print(\"Please start over\")\n        firstMeasure=1\n    else\n    \n        chunks=5\n        xdelta=(boxXmax-boxXmin)/chunks\n        ydelta=(boxYmax-boxYmin)/chunks\n        zdelta=(boxZmax-boxZmin)/chunks\n\n        minError=1000000000\n        x=boxXmin\n        while x<=boxXmax do\n            y=boxYmin\n            while y<=boxYmax do\n                z=boxZmin\n                while z<=boxZmax do\n                    curError=0\n                    for i=1,#measureList do\n                        measure=measureList[i]\n                        mx=measure[1]\n                        my=measure[2]\n                        mz=measure[3]\n                        m2=measure[4]\n                        d2=(mx-x)^2+(my-y)^2+(mz-z)^2\n                        e=math.abs(d2-m2)\n                        curError=curError+e\n                    end\n                    if curError<minError then\n                        minError=curError\n                        marker_x=x\n                        marker_y=y\n                        marker_z=z\n                    end\n                    z=z+zdelta\n                end\n                y=y+ydelta\n            end\n            x=x+xdelta\n        end\n\n        vol=(boxXmax-boxXmin)*(boxYmax-boxYmin)*(boxZmax-boxZmin)\n\n        marker_pos=GetPosString(marker_x,marker_y,marker_z)\n\n        system.print(marker_pos)\n        system.print(vol)\n    end\nend\n","filter":{"args":[{"value":"option3"}],"signature":"actionStart(action)","slotKey":"-2"},"key":"4"},{"code":"firstMeasure=1\n--measureCount=0","filter":{"args":[{"value":"option9"}],"signature":"actionStart(action)","slotKey":"-2"},"key":"5"}],"methods":[],"events":[]}
